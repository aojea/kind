// Code generated by go-bindata.
// sources:
// ../../../../images/base/Dockerfile
// ../../../../images/base/clean-install
// ../../../../images/base/entrypoint/main.go
// DO NOT EDIT!

package sources

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesBaseDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x7d\x6f\xdb\x46\xd2\xff\x5f\x9f\x62\x40\x19\xad\x9d\x8a\xa2\x63\xc7\xa9\xeb\xc2\x7d\xa0\xd8\x8a\x2b\xc4\x96\x02\x49\x4e\x10\xf4\x29\x8c\x25\x39\x22\xb7\x5a\xee\xf2\xf6\x45\xb2\x92\xcb\x77\x3f\xcc\xf2\x45\x92\x93\xf4\x8a\xeb\x5d\x10\xc0\x36\x77\x77\xde\x67\x7e\xbf\xdd\x2e\x5c\xa9\x72\xa3\x79\x96\x5b\x38\x39\x7e\x7e\x0e\xf3\x1c\xe1\x8d\x8b\x51\x4b\xb4\x68\x60\xe0\x6c\xae\xb4\xe9\x77\xba\x9d\x2e\xdc\xf2\x04\xa5\xc1\x14\x9c\x4c\x51\x83\xcd\x11\x06\x25\x4b\x72\x6c\x56\x7a\xf0\x0e\xb5\xe1\x4a\xc2\x49\xff\x18\x0e\x69\x43\x50\x2f\x05\x47\x3f\x77\xba\xb0\x51\x0e\x0a\xb6\x01\xa9\x2c\x38\x83\x60\x73\x6e\x60\xc1\x05\x02\x3e\x26\x58\x5a\xe0\x12\x12\x55\x94\x82\x33\x99\x20\xac\xb9\xcd\xbd\x9a\x5a\x48\xbf\xd3\x85\x0f\xb5\x08\x15\x5b\xc6\x25\x30\x48\x54\xb9\x01\xb5\xd8\xdd\x07\xcc\x7a\x83\xe9\x5f\x6e\x6d\x79\x11\x45\xeb\xf5\xba\xcf\xbc\xb1\x7d\xa5\xb3\x48\x54\x1b\x4d\x74\x3b\xba\x1a\x8e\x67\xc3\xf0\xa4\x7f\xec\x8f\xdc\x4b\x81\xc6\x80\xc6\x7f\x38\xae\x31\x85\x78\x03\xac\x2c\x05\x4f\x58\x2c\x10\x04\x5b\x83\xd2\xc0\x32\x8d\x98\x82\x55\x64\xef\x5a\x73\xcb\x65\xd6\x03\xa3\x16\x76\xcd\x34\x76\xba\x90\x72\x63\x35\x8f\x9d\xdd\x0b\x56\x63\x1d\x37\x7b\x1b\x94\x04\x26\x21\x18\xcc\x60\x34\x0b\xe0\xd5\x60\x36\x9a\xf5\x3a\x5d\x78\x3f\x9a\xff\x3a\xb9\x9f\xc3\xfb\xc1\x74\x3a\x18\xcf\x47\xc3\x19\x4c\xa6\x70\x35\x19\x5f\x8f\xe6\xa3\xc9\x78\x06\x93\xd7\x30\x18\x7f\x80\x37\xa3\xf1\x75\x0f\x90\xdb\x1c\x35\xe0\x63\xa9\xc9\x7e\xa5\x81\x53\x18\x31\xa5\x98\xcd\x10\xf7\x0c\x58\xa8\xca\x20\x53\x62\xc2\x17\x3c\x01\xc1\x64\xe6\x58\x86\x90\xa9\x15\x6a\xc9\x65\x06\x25\xea\x82\x1b\x4a\xa6\x01\x26\xd3\x4e\x17\x04\x2f\xb8\x65\xd6\x7f\xf9\xc2\xa9\x7e\xa7\xd3\x85\x25\x97\x29\x24\xc2\x19\x8b\x1a\x62\x46\xae\x16\x2c\xc3\x1e\xc4\x8e\x0b\x4b\x8e\xba\xd8\x49\xeb\x2e\x9e\x9f\xf7\x8f\x5f\xf8\x78\xcf\x55\x55\x04\x6b\x04\x96\xa6\x60\x36\xc6\x62\x91\xf6\xe0\x6a\x3c\xea\x91\x5e\x50\xde\x2f\xab\x94\x30\x20\x11\xd3\x2a\xee\xda\x49\x5f\xa6\x2c\x2d\xbc\x98\xd7\x4a\x37\x67\xe1\x07\x48\x55\xb2\x44\x0d\x89\x92\x0b\x9e\x39\xed\x6d\xa6\x7a\x4b\x21\x46\xa1\xd6\x3d\x30\x75\x40\x16\x4a\x08\xb5\x26\x77\x35\x2e\x50\xa3\x4c\xd0\x5c\x74\xba\xbe\x68\x4c\x5d\x35\x0b\xca\x35\x9a\xa5\x55\xa5\x2f\x9d\x35\x5f\xf2\x68\x56\xe7\x3a\xaa\x95\x46\x57\x4a\x52\x3d\xa2\x1e\x49\x8b\x7a\xc1\x12\x8c\x76\xe4\xa4\xb8\x42\xa1\x4a\xd4\xa6\xaf\x31\xcd\x99\xed\x27\xaa\x88\x62\xa1\xb2\xe8\xe4\xf8\xf9\x8b\xe8\xf8\x8c\xfe\x6b\x27\x29\xf4\x61\x2d\x33\xa4\xf2\xe7\x32\xac\xbc\x09\x93\x46\xc3\x5f\x17\xfc\x32\x3a\xfe\x29\x7a\x7e\xfa\x85\x60\x2e\x43\x16\x4a\x25\xc3\x52\xf3\x15\x17\x98\x61\xba\x2b\xbe\x33\x98\xde\x50\x1d\x0e\x1f\x46\x77\x83\x9b\xe1\x65\xb0\x9b\xb5\xa0\xf3\x7a\x3a\xb9\x83\x83\x4f\xdb\x0d\x9f\x29\xf7\xe3\xc9\x7c\x78\x01\x83\xe9\xd5\xaf\x50\x38\x63\x21\x46\x48\x71\xc1\x25\xa6\xc0\x32\xdf\xa9\x0b\xaa\x0a\x3a\xbc\x6b\xbf\x4a\x4c\xbf\x72\xd0\x5b\x8e\x32\xe3\x12\xa3\x36\x1b\x11\x55\x4e\x8a\x3a\xea\x9a\x44\x95\xe8\x2d\x23\x1d\x97\x01\x2b\xd2\x97\x2f\x02\xd2\x6c\xd0\x52\x03\xc2\xf5\xf0\xd5\x68\x30\x7e\x78\x3d\x9d\x8c\xe7\xc3\xf1\xf5\xa5\x54\x92\x53\x32\x58\x62\xf9\x0a\xc1\x58\x55\x1a\x30\xaa\x40\x60\xa5\x85\x35\xf3\x75\x6e\x7a\x55\xfd\x71\xe3\x87\x52\xa7\x0b\x0c\x34\x32\x01\x4c\x67\xae\x40\x69\x7b\xb0\xc6\xef\x35\xc2\x21\x8b\x8f\x9c\x21\x3d\x64\x83\x55\x90\xa1\x05\x06\x16\x8b\x52\x69\xa6\x37\x30\x1c\xbf\xab\x3c\xed\x7b\x2b\xff\xdc\x9a\x4e\xe7\x6a\xf2\xf6\x03\x24\x02\x99\x0c\xb9\x34\x96\x09\x01\x91\x33\x3a\x12\x2a\x61\x22\x8a\xb9\x8c\xf6\x16\x3b\xd3\xfb\x31\x24\x79\xa1\x52\xf8\xe1\xf1\xcf\x77\x76\xba\x70\x83\x16\x52\x2c\x51\xa6\x28\x13\x8e\x86\x1a\x2d\xc7\x9d\x96\x04\x26\x34\xb2\x74\x03\x39\x33\x17\x60\x4c\xde\xa3\xa0\xf4\xc0\x48\x56\xa6\x7e\x77\x15\x93\x58\xab\x25\x4a\x48\xd5\x5a\x02\x97\x56\xc1\x21\xb2\x24\xf7\x23\x0b\x04\x97\x78\x44\xdd\x12\x42\xc9\x92\x25\xcb\x90\x3a\x34\x41\x63\x28\x1c\x34\x63\x6a\x8b\x28\x68\x55\x8e\x9f\x6e\xde\x6d\x67\x83\x7a\xc5\x13\x34\x70\x58\x97\xe9\xd1\x57\x77\x93\xdc\xba\xbf\x23\xc8\x37\x25\xea\xa5\x8b\x11\x22\x58\x6e\x51\x8b\x20\x44\x49\x94\xd6\x78\x11\x05\x37\xc9\x56\xce\xa1\xb3\x5c\x70\xcb\xd1\x0f\x1d\x42\x21\x2e\x41\x39\x0d\xe4\x23\xcd\x19\x2e\xb3\xa3\x2a\x60\x92\x76\xf8\xe0\xba\x12\x0e\x35\x16\x6a\x45\xbe\x38\xb9\x66\x92\x26\x77\x33\x71\x1a\xd3\xe9\xd8\x6b\x2e\x99\x10\x1b\x3a\x99\x72\xe3\x51\x63\x59\x98\x8c\x94\xfc\xa1\x9c\x96\x4c\xa4\xff\xbb\xc1\xe0\x8b\x64\xaf\xa6\xfe\xbf\xe3\x51\x90\xb2\x1b\x5a\xcd\xa4\x29\x95\xb6\xa1\x57\x0f\x09\x0b\x13\xd4\x96\x10\x80\xf9\xb0\x39\x2d\x5a\x14\x0b\x4b\x4d\x76\x51\x9c\xc2\x44\x15\x85\x92\x90\x49\x57\x66\x27\x20\x4c\x1c\x6a\x14\x48\xc5\xd4\x88\x6f\x23\x51\x5b\x68\x36\x66\x05\x82\xc7\xf5\xdf\xc7\xed\xc6\x44\x49\x69\x35\x4b\x96\xc0\x4b\x4b\xd1\x31\xc0\x4b\xad\x9c\xc5\x13\x40\x9b\x53\xfc\xc1\xa8\x84\x59\xa0\x34\x85\x82\x4b\xf7\x08\x85\x72\xd2\x02\xc6\xf5\x01\x97\xe2\x0a\x96\xd4\x0a\xcc\x2d\x4c\x58\x61\x43\xa3\x20\x66\x26\x07\x6d\x36\x32\xa9\x3f\x7d\xf7\x1d\x2c\x08\x97\x22\xc1\xe3\x76\x5c\x57\x3f\xe9\x07\x97\xdc\xf6\x2d\xd3\x19\xda\x3e\xa5\xd5\x44\x10\x4a\x56\x20\x04\x8d\x2f\xb6\x28\x89\xa2\x98\xd0\xa0\x75\x65\xbf\x4e\x76\x00\x61\x8a\x02\x2d\x6e\xd5\xe8\x02\xc2\xc5\x57\xf5\x14\x4e\x58\x1e\x3a\x83\x7a\x5f\xd5\xb3\x2f\x0e\xa3\x4d\x9e\x1e\x7e\xf6\xcd\xcd\x5f\xd1\xe4\x87\x42\xb8\x30\xff\x4e\xcf\xd7\x82\x41\xe5\x64\x9f\x9e\xa4\x60\xff\x8d\xe3\x14\xde\xc4\x8a\xbf\x24\x21\x66\x86\x27\xdf\x34\x1c\x93\x5c\x41\x30\x45\x96\xbe\xb9\x33\xd9\xa5\x54\x01\xfc\xf2\xcb\x7e\xc0\x9a\x06\xeb\x13\xf2\xd3\x1c\x1c\xd5\x5d\x50\x75\x4a\x0f\xd6\x39\x4f\x72\x3f\x49\x0c\x8d\x9d\x9c\x95\x25\x36\xc8\xb4\xc6\x66\x5e\x55\x20\x51\x53\xca\x76\x6e\xb0\x58\xad\x88\xdb\xd1\x10\xf5\xa4\xed\x5b\x18\x56\x4b\x89\x7c\xed\x46\x4d\x93\x62\x54\xa1\x68\xd4\x35\x68\x43\x57\x86\x36\xc7\x50\x63\xa9\x0c\xb7\x4a\x6f\x08\x78\x64\xda\xca\xdc\x0e\xb3\x3e\x57\x5e\x43\xe4\xab\x2f\xe2\xb2\x99\xeb\xb6\x51\x14\x2e\x2b\x22\x14\x75\xb7\xf3\x36\xdc\x99\xb7\x04\x54\xd5\x9f\xdf\x1b\xb8\x79\x7b\x03\x4b\xdc\xf8\x05\x22\x5c\x9e\x05\x71\x99\xa1\x2e\x35\x97\x76\xef\xfb\x9e\x75\x21\xb8\x32\x65\x16\x2b\x9c\xe0\x4f\x02\x5b\x0f\xc9\x96\x07\x10\x55\x78\x49\x00\xa2\x16\x0b\x9e\x70\x3f\x11\x8d\x2b\x69\xf8\x54\xa4\x7a\xe7\x8e\x91\x38\xad\x51\x5a\xb1\x21\x0a\x4d\x69\x28\x39\x0d\x62\xb0\x34\x0e\x77\x66\xe5\x57\x62\x62\x99\x59\x9a\xc8\x0f\x80\x2f\xa2\x51\xa1\xf0\xe4\xea\xcd\x70\xfa\xf0\x6e\x38\x9d\x8d\x26\xe3\xcb\xc0\xdb\xd5\x7f\x16\xf8\x70\xd7\xd4\xb2\x45\x70\x94\xab\x9e\x67\x01\x4f\x28\x40\xbf\xa5\x18\x9e\x2a\x58\x05\x0c\x88\x3d\x7d\x44\xad\x60\xc5\x84\xa3\xb2\x30\x5c\x78\xfa\x58\xd3\xd9\x8a\x5d\xc0\x42\xab\xc2\xcf\xde\x25\x6e\x08\x2a\x83\xf7\xd5\xc2\x45\xf3\x11\x94\xb3\xa5\xb3\x60\x72\xe5\x44\xea\xb5\xc7\x54\x74\x9a\x8a\xec\xd0\xd8\x54\x39\xdb\x90\x13\x62\x1b\xba\x20\x7c\x39\x0a\x2a\x26\xf4\x76\xfe\xf0\x66\xf8\xe1\xe1\x7a\x32\x9e\x3f\xbc\x1f\x4c\xc7\x0f\x93\xf1\xc3\xf5\x60\x7c\x33\x9c\x4e\xee\x67\x0f\xf7\x33\xcf\xde\x16\x4c\x18\x0c\x2a\x6c\xa0\x09\x1f\x2e\xcc\xec\x16\x82\x6d\xf9\xae\xa5\x50\x2c\xdd\x2d\xe1\xaa\x74\x0f\x0e\xfb\x55\x7f\x29\xd3\x0c\xfc\x9f\xeb\x36\x3c\x18\x5d\x07\x47\x51\x56\x66\x01\xfc\xb3\x75\x85\xea\x26\xdc\x36\x6c\xf3\x79\xa7\xbc\xe0\x78\xf8\xea\xf5\xd5\xf5\xf9\xf9\x76\x57\xc5\xe6\x0e\x3e\xd1\xcf\xcf\x01\xc9\x08\xe9\xe0\xb6\xf6\xda\xc9\x0e\x10\xa4\x18\xc3\x6f\x4c\x27\xf9\x65\x7d\xe0\x77\xf8\xfb\x6e\xc0\xc1\xa1\x30\xf1\x43\x03\x69\x61\x62\x8e\xc0\x78\xa8\x09\xb6\x66\xee\xa3\x6a\xd0\x76\xf5\xe5\xc1\xa7\xfd\x1a\xfb\x1c\xec\x0e\x9e\xab\xf1\x08\x62\x2e\x99\x26\xba\x61\x15\x44\xaa\xb4\x51\x22\x39\xd1\x36\xe2\x18\x93\xeb\xc9\x61\x8c\xd2\xe6\x88\x44\x73\x8f\x2e\xa8\xa3\x60\x9d\x6f\x20\x82\x75\xce\x2c\xe4\xa8\x2b\xd6\x7b\x35\x1e\x6d\xcb\x78\x75\xdc\xff\xb1\xff\x22\x68\x17\xe6\x83\xe9\xab\xc1\xed\xed\x65\x90\x48\x1e\x96\xc2\x65\x5c\x9a\xb0\x0e\x51\x78\xf0\x69\xe7\xec\xe7\xbe\xcd\x3e\x6e\x0f\x7a\x12\x7f\x3f\xbd\xbd\x6c\xcb\x21\xe3\x36\x77\xb1\x0f\x5f\x4b\x2c\x24\xda\xb5\xd2\x4b\x2e\xb3\xa8\x16\x1e\xd5\xd1\x32\x6d\xdc\xa3\xad\x50\x2f\xaf\xd2\xda\xc8\xff\xbc\x6f\x44\x54\xfd\x59\x9b\xfd\x79\xb7\x38\xa9\x36\xc3\x50\xa3\xd5\x1b\x38\x83\x30\xac\xfb\x23\xb2\x45\x49\x81\x23\xf3\xa1\x16\x4e\x72\x77\x52\x64\x72\x76\x72\xf6\xd2\xb8\x62\x7f\x73\xbb\x5e\x2c\x53\xae\x21\x2c\xf7\x92\xb0\x5d\xb6\x4c\x43\x78\xb5\xbf\x18\x3e\x7e\x5c\x7c\x43\x1a\xc1\x98\xde\x5f\xa4\xc4\x5b\x24\xfc\xa8\xd9\x10\x4d\x30\xe0\xbe\x7f\xb9\x6c\x58\xeb\x21\xb7\xb0\xe6\x42\x40\x92\x63\xb2\x6c\xef\xe2\x6d\xb0\x69\x0c\x1d\xfd\xd7\xee\xa0\x74\x2b\xd9\x8a\x6e\x51\xa1\xb1\x10\x1f\xb9\x35\x04\x66\xb3\xd1\xcd\x74\x7e\x37\x1a\xff\x70\x5a\x8d\xc0\xd9\xe8\x66\x3e\x9c\xde\xc1\x61\x05\x99\x1a\x43\x7c\xc4\xc4\xd1\xbc\xe6\x76\xd7\xbc\xd8\x65\x1f\xb9\x10\x6c\x97\xbf\x9a\x5c\xad\x1f\x62\x97\xf5\x93\x8c\xff\x1f\x4f\x2f\x9f\xd3\x5d\xf4\xec\xc7\xce\x6c\x3e\x79\x3b\x1b\xdd\x8c\x07\xb7\x3b\xfa\x28\x6a\x6b\xcd\xca\xd6\x26\xff\xea\x43\x84\xdc\x3f\x4f\x30\x01\x28\xad\xde\x94\x8a\xd3\x65\x8c\x6e\xee\xe5\x32\xab\xee\x85\x3e\x78\xb9\x5a\xb7\x57\x38\xff\xce\x50\x61\x34\x4f\x3c\xe8\xf8\x95\x3f\xe8\x42\x2a\xd0\x1a\x70\x86\x66\x39\xb8\xb2\xc2\x78\xa2\xd1\x99\x81\x18\x17\x4a\x57\x29\xe0\xd2\xd1\xdc\x56\x1e\x81\x6a\x8b\xc8\xc0\x9c\x0b\x84\x52\xa3\x67\x7f\x1e\x09\x98\x6d\x2d\xe6\x06\xde\x8e\xae\x9f\x77\xba\xad\x41\x6b\x04\x81\x2b\xd4\x74\xd5\x22\x13\xb6\x86\xd7\xcf\x23\xd5\xfd\xef\x37\x08\xb6\xce\x45\xdb\x5f\x83\x1e\x04\x4f\xee\x78\x01\xfc\xde\xe9\xc2\x7b\xf4\xec\x65\x5b\x61\x8a\xe0\x82\x94\x37\xd7\x28\xaa\xa5\x15\xd3\x5c\x79\x57\x9b\x2b\x55\x83\xd3\x04\x8e\x02\x6d\x0f\xd0\x26\xfd\xa3\x16\xae\x9b\xf8\x3d\x53\x52\x6c\x9e\x35\x77\x2c\x0f\x7e\xfe\xf1\xa4\xe7\xc5\x6e\xed\xf3\xc8\xbe\x42\xad\x79\x9a\x12\x81\xb2\xa4\xda\xf2\x02\x3b\xc3\xf1\x7c\xfa\xe1\xed\x64\x34\x9e\x93\x73\x4f\x7c\x78\xe2\xa0\xa1\x6f\x44\x10\xc9\x37\xea\x9d\x1c\x9b\x26\xc9\x34\x2b\xf3\xf6\x21\x81\xc1\x4a\x09\x47\xf9\x52\xc0\x56\x8a\xa7\x5e\xb9\x60\x1b\xca\x53\xfd\x6b\xeb\x0b\x5d\xbc\xea\x47\x25\xc1\xfc\xf9\x84\xd1\x2d\x2f\xc9\x99\xcc\x28\x75\xad\x34\x5f\x68\x0c\xae\xbd\x4a\xff\x0a\x49\x0a\x3b\x5d\x50\x49\xe2\x74\x53\x15\xfe\x15\x83\xce\x71\x5b\xbf\xa5\x5d\xfc\x07\xcf\x17\x95\xca\xce\xbb\xc9\xed\xfd\xdd\xd0\x87\x66\xc5\xb4\x27\xc1\xd5\xf1\x3a\x04\x5f\x03\x04\xa2\x22\xde\xd4\x26\xe9\x77\x83\x2b\xc2\x49\xff\xd0\xc7\x8c\xe1\x99\xa4\x44\xed\xf4\xe4\xce\x0c\xdf\xa7\xd8\x69\xc4\x8d\x71\x68\xa2\xd3\xd3\x1f\x5f\x74\xfd\xef\x74\xb7\x43\x69\xc3\x93\xf3\xf3\xf3\xf3\x93\xd3\xb3\xb3\xbf\x29\xe7\xf4\xf4\xa7\x93\xb3\xf3\x17\xe7\xa7\x9d\x7f\x05\x00\x00\xff\xff\xaf\xce\x3a\xff\x5c\x16\x00\x00")

func imagesBaseDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseDockerfile,
		"images/base/Dockerfile",
	)
}

func imagesBaseDockerfile() (*asset, error) {
	bytes, err := imagesBaseDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/Dockerfile", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseCleanInstall = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x51\x6f\xdb\x36\x14\x85\xdf\xf9\x2b\xce\xac\x62\xd8\x86\x48\x4a\xf3\x32\x60\xc5\x86\x79\x49\x86\x19\x2d\x6c\x20\x76\x57\x14\xdb\x1e\xae\xa8\x2b\xe9\x22\x12\xc9\x91\x57\x75\xfc\xef\x07\x2a\x71\x50\x63\x7e\x32\x75\x0e\x79\x3e\x1e\xde\xe2\x9b\xba\x11\x57\xa7\xc1\x98\x02\xb7\x3e\x9c\xa2\xf4\x83\xe2\xe6\xfa\xed\x8f\x38\x0c\x8c\xf7\x73\xc3\xd1\xb1\x72\xc2\x7a\xd6\xc1\xc7\x54\x99\xc2\x14\xf8\x20\x96\x5d\xe2\x16\xb3\x6b\x39\x42\x07\xc6\x3a\x90\x1d\xf8\xac\x5c\xe1\x4f\x8e\x49\xbc\xc3\x4d\x75\x8d\xef\xb2\x61\xf5\x22\xad\xbe\x7f\x67\x0a\x9c\xfc\x8c\x89\x4e\x70\x5e\x31\x27\x86\x0e\x92\xd0\xc9\xc8\xe0\x27\xcb\x41\x21\x0e\xd6\x4f\x61\x14\x72\x96\x71\x14\x1d\x96\x98\x97\x43\x2a\x53\xe0\xf3\xcb\x11\xbe\x51\x12\x07\x82\xf5\xe1\x04\xdf\x7d\xed\x03\xe9\x02\x9c\x7f\x83\x6a\xf8\xa9\xae\x8f\xc7\x63\x45\x0b\x6c\xe5\x63\x5f\x8f\xcf\xc6\x54\x7f\xd8\xdc\xde\x6f\xf7\xf7\xe5\x4d\x75\xbd\x6c\xf9\xe8\x46\x4e\x09\x91\xff\x9d\x25\x72\x8b\xe6\x04\x0a\x61\x14\x4b\xcd\xc8\x18\xe9\x08\x1f\x41\x7d\x64\x6e\xa1\x3e\xf3\x1e\xa3\xa8\xb8\xfe\x0a\xc9\x77\x7a\xa4\xc8\xa6\x40\x2b\x49\xa3\x34\xb3\x5e\x94\x75\xa6\x93\x74\x61\xf0\x0e\xe4\xb0\x5a\xef\xb1\xd9\xaf\xf0\xdb\x7a\xbf\xd9\x5f\x99\x02\x9f\x36\x87\x3f\x76\x1f\x0f\xf8\xb4\x7e\x78\x58\x6f\x0f\x9b\xfb\x3d\x76\x0f\xb8\xdd\x6d\xef\x36\x87\xcd\x6e\xbb\xc7\xee\x77\xac\xb7\x9f\xf1\x7e\xb3\xbd\xbb\x02\x8b\x0e\x1c\xc1\x4f\x21\x66\x7e\x1f\x21\xb9\x46\x6e\x73\x67\x7b\xe6\x0b\x80\xce\x3f\x03\xa5\xc0\x56\x3a\xb1\x18\xc9\xf5\x33\xf5\x8c\xde\x7f\xe1\xe8\xc4\xf5\x08\x1c\x27\x49\xf9\x31\x13\xc8\xb5\xa6\xc0\x28\x93\x28\xe9\xf2\xe5\x7f\x97\xaa\xf2\x2c\xad\x91\x6c\x94\xa0\x60\x67\x29\xa4\x79\xa4\xdc\xcc\xf2\x46\xd3\xe4\x1d\xee\xbc\x7d\xe4\x28\x53\x4e\x0a\xa4\xca\xd1\x2d\x2c\xe2\x92\xd2\x38\x2e\xb1\x64\x1f\xa9\xe7\x64\x8a\x9c\x9a\x13\x1c\xec\xc8\xb4\x30\xcd\x61\x89\x9c\x9d\x63\xcb\x29\x51\x3c\x9d\xb7\x82\xa2\x4a\x47\x56\xf3\xa8\x82\xab\xbe\x7a\xde\x55\x9e\x75\x09\x9a\x5f\x30\x81\x9b\x97\x3f\xd6\x3b\xa7\x91\xec\xa3\x31\x89\x15\xa5\x07\xc7\xc8\x4f\xa2\xc6\x48\x87\xbf\xf0\xa6\xc0\xcf\xb8\xc6\x3f\xef\x16\x08\x03\xb0\x1d\x3c\x7e\xf9\xf6\x06\xab\xad\x7f\xe5\x3c\x77\xc8\xed\x2a\x5b\x9e\x44\xf1\xd6\x74\x62\x0c\x05\x2d\x7b\x56\xcc\xa1\x25\xe5\xd7\xe5\x99\xa7\x3c\xa1\x2c\x9d\x3f\xf3\x95\x91\x73\x47\xec\xda\x84\x37\xbf\xbe\xba\x97\x3b\xa0\x3c\x99\x38\xa1\x8c\x1d\xfe\x36\x00\xea\x2f\x14\x6b\x9b\x47\xb9\x6e\xb9\xb1\xde\x75\xf5\x0f\x5f\x29\xa3\x34\x35\x05\xad\x47\x49\x9a\x2e\x15\xdf\xbf\xae\x75\x0a\x17\xda\xb2\x36\xff\x05\x00\x00\xff\xff\xdd\xdb\xd0\x5d\x1a\x04\x00\x00")

func imagesBaseCleanInstallBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseCleanInstall,
		"images/base/clean-install",
	)
}

func imagesBaseCleanInstall() (*asset, error) {
	bytes, err := imagesBaseCleanInstallBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/clean-install", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesBaseEntrypointMainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x55\x61\x73\xdb\xb8\x11\xfd\x2c\xfc\x8a\x3d\x76\x6e\x2a\xe5\x68\xd2\x92\xcf\x8e\x4f\x4d\x3e\xa8\xb6\x92\x68\xe2\xca\x19\x4b\xa9\x9b\x49\x3d\x09\x08\x2e\x49\x8c\x41\x80\x05\x40\xc9\x6c\x27\xff\xbd\xb3\x20\xed\xc8\xc9\x7d\xb0\x2c\x90\xc0\xdb\xb7\xef\x3d\xac\xd2\x17\xec\xc2\x34\x9d\x95\x65\xe5\x61\x76\x3c\x3d\x87\x6d\x85\xf0\xbe\xcd\xd0\x6a\xf4\xe8\x60\xd1\xfa\xca\x58\x97\x30\x76\x25\x05\x6a\x87\x39\xb4\x3a\x47\x0b\xbe\x42\x58\x34\x5c\x54\x08\xc3\x9b\x18\xfe\x89\xd6\x49\xa3\x61\x96\x1c\xc3\x98\x36\x44\xc3\xab\x68\xf2\x37\xd6\x99\x16\x6a\xde\x81\x36\x1e\x5a\x87\xe0\x2b\xe9\xa0\x90\x0a\x01\x1f\x04\x36\x1e\xa4\x06\x61\xea\x46\x49\xae\x05\xc2\x5e\xfa\x2a\x14\x19\x20\x12\xf6\x69\x00\x30\x99\xe7\x52\x03\x07\x61\x9a\x0e\x4c\x71\xb8\x0b\xb8\x67\x0c\x00\xa0\xf2\xbe\x99\xa7\xe9\x7e\xbf\x4f\x78\x60\x99\x18\x5b\xa6\xaa\xdf\xe5\xd2\xab\xd5\xc5\x72\xbd\x59\x1e\xcd\x92\x63\xc6\x3e\x6a\x85\xce\x81\xc5\xff\xb4\xd2\x62\x0e\x59\x07\xbc\x69\x94\x14\x3c\x53\x08\x8a\xef\xc1\x58\xe0\xa5\x45\xcc\xc1\x1b\xe2\xb9\xb7\xd2\x4b\x5d\xc6\xe0\x4c\xe1\xf7\xdc\x22\xcb\xa5\xf3\x56\x66\xad\x7f\x26\xd0\x23\x2b\xe9\xe0\x70\x83\xd1\xc0\x35\x44\x8b\x0d\xac\x36\x11\xfc\x7d\xb1\x59\x6d\x62\x76\xbb\xda\xbe\xbb\xfe\xb8\x85\xdb\xc5\xcd\xcd\x62\xbd\x5d\x2d\x37\x70\x7d\x03\x17\xd7\xeb\xcb\xd5\x76\x75\xbd\xde\xc0\xf5\x1b\x58\xac\x3f\xc1\xfb\xd5\xfa\x32\x06\x94\xbe\x42\x0b\xf8\xd0\x58\xe2\x6e\x2c\x48\x92\x0e\xf3\x84\x6d\x10\x9f\x15\x2f\x4c\x4f\xc6\x35\x28\x64\x21\x05\x28\xae\xcb\x96\x97\x08\xa5\xd9\xa1\xd5\x52\x97\xd0\xa0\xad\xa5\x23\xf3\x1c\x70\x9d\x33\x25\x6b\xe9\xb9\x0f\xeb\x9f\xda\x49\xd8\x8b\x94\xb1\xf4\x05\xdb\x92\x85\x54\x17\x6b\xd4\xde\x81\x69\x89\x06\x21\xa3\xf6\xb6\x6b\x8c\xd4\x3e\x81\x95\x9f\xb3\x23\xd8\x73\xe9\x5d\xe0\xb2\x59\xbd\xfd\xb8\xb9\x99\xb2\x23\xc2\xd4\x80\x0f\x28\x1c\x8c\xb9\x2d\x77\x9f\xa7\x77\x31\xf4\x5f\xe6\x77\x31\xa0\xde\x7d\x9e\xdf\x4d\x58\x5f\x87\x2b\x65\xf6\x0e\x5a\x47\x1e\x34\x68\x0b\x63\x6b\x30\x41\x05\x2e\x7a\xa6\x52\x07\x9a\x91\x36\x39\x46\x20\x8c\xa6\xa0\xa0\x85\x9d\xe4\xf0\x35\x37\xe2\x3e\x28\x86\xe2\x2b\xfb\x92\x61\x61\x2c\x7e\x81\x3d\x42\xc5\x77\x48\x10\x2d\x57\xaa\x83\x28\x33\xc6\x63\x1e\x05\x24\xa9\xa5\x27\x3d\x00\x77\x68\x3b\x5f\x91\x54\xa8\x28\x66\xca\xe8\xb2\xcf\xa8\xf4\x09\x63\xb7\x08\x82\xeb\xbe\x21\x87\x3a\x7f\x6c\x92\xb8\x86\xa0\x37\xd6\x08\x32\x8a\xd6\x56\x96\x25\x5a\x70\x9e\x5b\x4a\x51\xcf\xb9\x27\x10\xb1\xef\xca\xc1\x9e\xd0\xf6\x08\xdc\x22\xe4\x46\x23\x34\x96\x58\xd7\x74\x86\xeb\x8e\x30\x77\x92\x3c\xa3\x07\xe6\xb0\xf7\x84\xb1\xf5\xf5\x76\x39\xef\x6b\x1f\x9a\x84\x39\x70\x07\x1c\x9c\xd4\xa5\xa2\x04\x4c\x93\x7f\x85\x5b\x18\x43\xeb\x7a\x1c\xd5\xf5\x71\xf1\xb9\x92\x59\xd2\x8b\x5f\xf3\x7b\x74\x20\x3d\x20\x77\x92\xd2\x60\x20\x6b\xa5\xca\xa1\x31\xd6\xf3\x4c\x75\x71\x90\xa9\xb7\x89\x38\x6b\xba\x2c\xe4\xf6\xbe\xe2\x9e\x0e\xe6\x06\xdd\x10\x9c\x14\x96\xdf\x9b\x3c\x88\x0f\x07\x57\xd3\xf1\xc1\xa9\x1f\x93\x04\x9e\xa0\x7e\xce\x51\x9a\x42\xef\x66\xf0\x36\xf4\xe0\x92\x85\x2d\x1d\xa5\x88\x35\x5c\xdc\x13\x4e\xcd\xa5\x66\x4c\xd6\x44\x18\xc6\x6c\x14\x19\x17\x85\xcf\xd4\xc9\x52\x93\xf2\xa3\xc8\x75\x4e\x70\xa5\x22\xc6\x46\x91\x32\x65\xc4\x26\x81\x6d\x87\xae\x17\xd2\x55\xa6\x55\x39\x64\xfd\xfd\x12\x50\x73\x61\x4d\x0c\x59\xeb\x49\x7e\x25\x75\xfb\x40\x19\x1c\xf8\x77\xa6\xfd\xab\x25\x89\x83\xc7\x06\x4a\xf4\x3d\x0c\xd7\x5d\x65\xf6\x84\x3c\x4c\xa9\x9a\xeb\x97\xc3\x7c\xd2\xed\x03\x2d\x8f\x1a\x5e\xa2\x0b\x2f\x06\x7e\xc9\xcb\xa4\xf2\xb5\x7a\x3c\xe5\xe6\x69\x5a\x4a\x5f\xb5\x59\x22\x4c\x9d\xd6\x26\xeb\xfa\x8f\x4c\x99\x2c\x3d\x3d\x9b\xe5\xc5\xb9\x98\xe5\x67\xc5\xef\xe7\x67\xc7\x53\x71\x9e\x4f\xf3\xe2\xe5\xec\xf4\xec\xe4\xfc\x8f\xd3\xb3\x3f\xf2\xd9\xa9\x38\xce\x8a\x69\xda\xdc\x97\x03\xfe\xf0\xef\x4b\xa0\x90\x94\xe6\x2f\x57\xd3\x63\x26\x8c\x76\x1e\x9c\x2c\xad\xaf\xa5\x86\xd7\x70\xf2\x3b\x63\x45\xab\x45\x90\x73\x3c\x81\xff\xb1\x51\x9a\x52\x2e\x77\xa8\x3d\xfc\xd7\xd4\x99\xc4\xc7\xac\xa3\xa3\x94\xd1\x28\xa7\x69\xae\x14\xe9\xf6\x61\x75\x39\x0d\xe6\x71\xd8\x57\x52\x61\x38\xfe\xd8\x4f\x5f\x3a\x97\x98\x68\xf4\xd4\x7b\x3a\x4b\xc9\xee\x46\xe6\x6c\x34\xa8\xb0\x2a\xb5\xb1\x38\x1e\x9c\x4a\x36\xab\xb7\x17\xef\xae\x2e\x27\x2c\x00\x95\x96\x67\xfd\x2d\xb0\xc8\x55\x74\x98\x1d\x61\xea\x9a\x12\x1a\xfe\x6c\xe9\xa0\xb0\xa6\x0e\x03\x8b\x56\x6c\x24\x0b\x50\xa8\xc7\x43\x72\x26\xf0\x0a\x66\xd4\xdc\x48\x99\x32\x79\xc3\x3d\x57\xe3\x68\x6d\x3c\xa0\x36\x6d\x59\xd1\x99\xb6\xcf\xac\x37\x07\x55\x7e\x89\x26\x6c\xf4\x8d\x8d\x44\x9d\xf7\x73\x0c\xe6\xaf\xbf\x87\xf1\x2e\x7e\x16\xcc\xc0\x98\xda\x3b\x0c\x33\x8c\x0d\x8d\x28\x19\x02\xb5\x59\xbd\xbd\xd9\xfe\x63\xb5\xfe\xed\x84\xca\xd4\xdc\x8b\x0a\x5c\xe7\x3c\xd6\xf9\x84\x8d\x04\x81\xd3\xbd\x1c\x8b\x8a\x6b\x82\xde\x04\x89\x62\x98\x4e\x9e\xe4\x5a\x1b\x2f\x8b\x6e\x2c\x62\x38\x50\x8c\x0a\x1d\x3c\x08\x3b\xc7\x8f\x26\xff\x76\x32\x99\xb0\xd0\xf6\x07\x2b\xb5\x57\x7a\x1c\xdd\xf2\xf0\x6b\xf7\x8c\x67\x92\x24\x51\x5f\x86\x68\xbc\x3a\x12\x41\x42\x5a\xfe\xf2\xfa\xc7\x5a\x4f\x42\x06\xc4\x62\x1c\x2d\x1f\x7a\x40\x5e\x78\x9a\x83\x81\xc0\x1c\x7e\xdd\xd1\xd9\xe1\x4c\x14\xd3\xf3\x09\x1b\x8d\x2c\xfa\xd6\x6a\xd2\x35\x28\xf6\xf4\x9b\xd1\x8f\xd6\x3f\xf1\x3a\x86\x7b\xc4\xe6\x71\xb0\xa2\xde\xb1\x67\xc5\x6f\x50\xa0\xdc\xe1\xd3\x88\x8e\x9f\xc6\x86\x37\x81\xc4\xaf\xbb\x7f\xeb\x28\x86\x27\x13\xa9\xcd\xa1\xa1\xe5\x03\x8a\xf1\xd3\x8b\xe0\xe7\x52\xef\xa4\x35\x7a\x3c\x99\xb0\x6f\xec\xff\x01\x00\x00\xff\xff\x39\x8f\xbf\x84\x4f\x09\x00\x00")

func imagesBaseEntrypointMainGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesBaseEntrypointMainGo,
		"images/base/entrypoint/main.go",
	)
}

func imagesBaseEntrypointMainGo() (*asset, error) {
	bytes, err := imagesBaseEntrypointMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/base/entrypoint/main.go", size: 0, mode: os.FileMode(438), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/base/Dockerfile":         imagesBaseDockerfile,
	"images/base/clean-install":      imagesBaseCleanInstall,
	"images/base/entrypoint/main.go": imagesBaseEntrypointMainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"images": {nil, map[string]*bintree{
		"base": {nil, map[string]*bintree{
			"Dockerfile":    {imagesBaseDockerfile, map[string]*bintree{}},
			"clean-install": {imagesBaseCleanInstall, map[string]*bintree{}},
			"entrypoint": {nil, map[string]*bintree{
				"main.go": {imagesBaseEntrypointMainGo, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
